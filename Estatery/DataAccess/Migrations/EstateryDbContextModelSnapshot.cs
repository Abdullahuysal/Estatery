// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(EstateryDbContext))]
    partial class EstateryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Concrete.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Advertiser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ConstructionYear")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 5, 13, 0, 39, 38, 985, DateTimeKind.Local).AddTicks(5887));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBath")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("SalesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SalesTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SquareMeter")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 5, 13, 0, 39, 38, 987, DateTimeKind.Local).AddTicks(9));

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SalesCategoryId");

                    b.HasIndex("SalesTypeId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Entities.Concrete.HouseImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HouseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HouseId");

                    b.ToTable("HouseImageUrls");
                });

            modelBuilder.Entity("Entities.Concrete.Land", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Advertiser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 5, 13, 0, 39, 38, 987, DateTimeKind.Local).AddTicks(9992));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("SalesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SalesTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SquareMeter")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 5, 13, 0, 39, 38, 988, DateTimeKind.Local).AddTicks(566));

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SalesCategoryId");

                    b.HasIndex("SalesTypeId");

                    b.ToTable("Lands");
                });

            modelBuilder.Entity("Entities.Concrete.LandImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LandId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LandId");

                    b.ToTable("LandImageUrls");
                });

            modelBuilder.Entity("Entities.Concrete.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityName = "karaman",
                            DistrictName = "merkez"
                        },
                        new
                        {
                            Id = 2,
                            CityName = "karaman",
                            DistrictName = "Ayrancı"
                        },
                        new
                        {
                            Id = 3,
                            CityName = "karaman",
                            DistrictName = "ermenek"
                        },
                        new
                        {
                            Id = 4,
                            CityName = "karaman",
                            DistrictName = "kazımkarabekir"
                        },
                        new
                        {
                            Id = 5,
                            CityName = "konya",
                            DistrictName = "meram"
                        },
                        new
                        {
                            Id = 6,
                            CityName = "konya",
                            DistrictName = "selçuklu"
                        },
                        new
                        {
                            Id = 7,
                            CityName = "mersin",
                            DistrictName = "mezitli"
                        },
                        new
                        {
                            Id = 8,
                            CityName = "mersin",
                            DistrictName = "silifke"
                        },
                        new
                        {
                            Id = 9,
                            CityName = "mersin",
                            DistrictName = "yenişehir"
                        },
                        new
                        {
                            Id = 10,
                            CityName = "mersin",
                            DistrictName = "çiftlikköy"
                        },
                        new
                        {
                            Id = 11,
                            CityName = "mersin",
                            DistrictName = "mut"
                        },
                        new
                        {
                            Id = 12,
                            CityName = "mersin",
                            DistrictName = "toroslar"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Entities.Concrete.SalesCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SalesCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "apartman"
                        },
                        new
                        {
                            Id = 2,
                            Name = "müstakil"
                        },
                        new
                        {
                            Id = 3,
                            Name = "site"
                        },
                        new
                        {
                            Id = 4,
                            Name = "villa"
                        },
                        new
                        {
                            Id = 5,
                            Name = "yazlık"
                        },
                        new
                        {
                            Id = 6,
                            Name = "tarla"
                        },
                        new
                        {
                            Id = 7,
                            Name = "bağ"
                        },
                        new
                        {
                            Id = 8,
                            Name = "zeytinlik"
                        },
                        new
                        {
                            Id = 9,
                            Name = "dükkan"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ofis"
                        },
                        new
                        {
                            Id = 11,
                            Name = "fabrika"
                        },
                        new
                        {
                            Id = 12,
                            Name = "plaza"
                        },
                        new
                        {
                            Id = 13,
                            Name = "büro"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.SalesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("SalesTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "satılık"
                        },
                        new
                        {
                            Id = 2,
                            Name = "kiralık"
                        },
                        new
                        {
                            Id = 3,
                            Name = "günlük kiralık"
                        },
                        new
                        {
                            Id = 4,
                            Name = "sezonluk"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Concrete.WorkPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Advertiser")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 5, 13, 0, 39, 38, 989, DateTimeKind.Local).AddTicks(127));

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SalesCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SalesTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 5, 13, 0, 39, 38, 989, DateTimeKind.Local).AddTicks(722));

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("SalesCategoryId");

                    b.HasIndex("SalesTypeId");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("Entities.Concrete.WorkPlaceImageUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("WorkPlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkPlaceId");

                    b.ToTable("WorkPlaceImageUrls");
                });

            modelBuilder.Entity("Entities.Concrete.House", b =>
                {
                    b.HasOne("Entities.Concrete.Location", "Location")
                        .WithMany("Houses")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SalesCategory", "SalesCategory")
                        .WithMany("Houses")
                        .HasForeignKey("SalesCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SalesType", "SalesType")
                        .WithMany("Houses")
                        .HasForeignKey("SalesTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("SalesCategory");

                    b.Navigation("SalesType");
                });

            modelBuilder.Entity("Entities.Concrete.HouseImageUrl", b =>
                {
                    b.HasOne("Entities.Concrete.House", "House")
                        .WithMany("HouseImageUrls")
                        .HasForeignKey("HouseId");

                    b.Navigation("House");
                });

            modelBuilder.Entity("Entities.Concrete.Land", b =>
                {
                    b.HasOne("Entities.Concrete.Location", "Location")
                        .WithMany("Lands")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SalesCategory", "SalesCategory")
                        .WithMany("Lands")
                        .HasForeignKey("SalesCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SalesType", "SalesType")
                        .WithMany("Lands")
                        .HasForeignKey("SalesTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("SalesCategory");

                    b.Navigation("SalesType");
                });

            modelBuilder.Entity("Entities.Concrete.LandImageUrl", b =>
                {
                    b.HasOne("Entities.Concrete.Land", "Land")
                        .WithMany("LandImageUrls")
                        .HasForeignKey("LandId");

                    b.Navigation("Land");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.HasOne("Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Concrete.WorkPlace", b =>
                {
                    b.HasOne("Entities.Concrete.Location", "Location")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SalesCategory", "SalesCategory")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("SalesCategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.SalesType", "SalesType")
                        .WithMany("WorkPlaces")
                        .HasForeignKey("SalesTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("SalesCategory");

                    b.Navigation("SalesType");
                });

            modelBuilder.Entity("Entities.Concrete.WorkPlaceImageUrl", b =>
                {
                    b.HasOne("Entities.Concrete.WorkPlace", "WorkPlace")
                        .WithMany("WorkPlaceImageUrls")
                        .HasForeignKey("WorkPlaceId");

                    b.Navigation("WorkPlace");
                });

            modelBuilder.Entity("Entities.Concrete.House", b =>
                {
                    b.Navigation("HouseImageUrls");
                });

            modelBuilder.Entity("Entities.Concrete.Land", b =>
                {
                    b.Navigation("LandImageUrls");
                });

            modelBuilder.Entity("Entities.Concrete.Location", b =>
                {
                    b.Navigation("Houses");

                    b.Navigation("Lands");

                    b.Navigation("WorkPlaces");
                });

            modelBuilder.Entity("Entities.Concrete.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Concrete.SalesCategory", b =>
                {
                    b.Navigation("Houses");

                    b.Navigation("Lands");

                    b.Navigation("WorkPlaces");
                });

            modelBuilder.Entity("Entities.Concrete.SalesType", b =>
                {
                    b.Navigation("Houses");

                    b.Navigation("Lands");

                    b.Navigation("WorkPlaces");
                });

            modelBuilder.Entity("Entities.Concrete.WorkPlace", b =>
                {
                    b.Navigation("WorkPlaceImageUrls");
                });
#pragma warning restore 612, 618
        }
    }
}
